# -*- coding: utf-8 -*-
"""
Created on Sat Apr 25 11:00:34 2020

@author: Sam
"""
from mingus.midi import midi_file_out, midi_file_in


#%%
from tinydb import TinyDB, Query # https://tinydb.readthedocs.io/en/latest/getting-started.html
db = TinyDB(r'C:\Users\Sam\Documents\Sidewinder\local files\jazz-licks-db.json')
db.insert({'name': 'test', 'passage': None, 'tags':'251'})
db_size = len(db.all())

#%% db functions
def find_all_matches(db, entry):
    q = [(Query()[t[0]]==t[1]) for t in [(key,value) for key, value in entry.items()]]
    
    qq = q[0]
    for i, subq in enumerate(q):
        if i>0:
            qq = qq & q[i] # combine the full query with &'s
    
    return [x.doc_id for x in db.search(qq)]

def load_entry(db, entry):
    '''
    Returns the entry as an object 
    '''
    return entry_instantiated_as_lick_object(entry) # placeholder for Class instantiation - defn depends on use reqs e.g. auto-convert between scale degree formats

def add_entry(db, entry):
    '''
    Adds entry with any necessary processing routines e.g. storing reference to pickled/midi/ly passage
    '''
    return new_doc_id


#%% examples
# Load midi generated by Lilypond (Frescobaldi)
y_comp, y_bpm = midi_file_in.MIDI_to_Composition(r'C:\Users\Sam\Documents\Sidewinder\sidewinder\Lilypond\references\1.mid')

# Re-export as midi for validation
midi_file_out.write_Composition(r'C:\Users\Sam\Documents\Sidewinder\sidewinder\Lilypond\references\1_out.mid', 
                                y_comp, repeat=0, verbose=True)
