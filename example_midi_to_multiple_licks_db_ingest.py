# -*- coding: utf-8 -*-
"""
Created on Sun Jul 26 17:35:07 2020

@author: Sam
"""
from mingus.containers import Track, Bar
from mingus.containers.composition import Composition
from mingus.midi import midi_file_out, midi_file_in
from tinydb import TinyDB, Query
from sidewinder.lick_library import licks_from_track, get_chords_from_track, JazzLick, find_partial_matches, load_entry

def main():
    
    db = TinyDB(r'C:\Users\Sam\Documents\Sidewinder\local files\jazz-licks-db-260720-new.json') # set-up / connection
    #db.insert({'name': 'test', 'passage': None, 'tags':'251'})
    db_size = len(db.all())
    print(db_size)
    
    # Load midi generated by Lilypond (Frescobaldi)
    y_comp, y_bpm = midi_file_in.MIDI_to_Composition(r'C:\Users\Sam\Documents\Sidewinder\local files\test_in_chord_dur1.mid') # generated via Lilypond (Frescobaldi)
    #midi_file_out.write_Composition(r'C:\Users\Sam\Documents\Sidewinder\local files\std_midi_out.mid', 
    #                                y_comp, repeat=0, verbose=True)
    #analyse_composition(y_comp)

    split_points = [5, 9, 13, 17, 21, 25, 29, 33, 36.5, 40.5, 45, 49, 53] # bar numbers 
    shared_tags = ['251','major','jiminpark'] 
    individual_tags = [[] for i in range(9)] + 2*[['pickup']] + [[] for i in range(3)] # i'th lick receives i'th element (tags)

    print(y_comp.tracks[1])
    print(get_chords_from_track(y_comp.tracks[1]))
    licks = licks_from_track(y_comp.tracks[2], get_chords_from_track(y_comp.tracks[1]), split_points,
                            shared_tags, individual_tags)
    
    print(licks[0].chords)
    # for _, lick in enumerate(licks):
    #     lick.store(db)
    licks[0].store(db)


if __name__ == '__main__':
    # main()
    from sidewinder.lick_library import Bars_from_list, Track_from_list
    tr = Track_from_list(Bars_from_list([[[0.0, 2.0, ['G-5', 'A#-5', 'D-6', 'F-6']], [0.5, 2.0, ['F-5', 'G-5', 'A-5', 'C-6']]]]))
    print(get_chords_from_track(tr))

    import mingus.core.chords as chords
    print(chords.determine(['F', 'G', 'A', 'C']))




