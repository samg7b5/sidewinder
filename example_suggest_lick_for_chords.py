# -*- coding: utf-8 -*-
"""
Created on Sun Jul 26 17:35:07 2020

@author: Sam
"""

# Load midi generated by Lilypond (Frescobaldi)
y_comp, y_bpm = midi_file_in.MIDI_to_Composition(r'C:\Users\Sam\Documents\Sidewinder\local files\jiminpark\20 Licks in Jazz 251.mid') # generated via Lilypond (Frescobaldi)
#midi_file_out.write_Composition(r'C:\Users\Sam\Documents\Sidewinder\local files\std_midi_out.mid', 
#                                y_comp, repeat=0, verbose=True)
#analyse_composition(y_comp)

split_points = [5, 9, 13, 17, 21, 25, 29, 33, 36.5, 40.5, 45, 49, 53] # bar numbers 
shared_tags = ['251','major','jiminpark'] 
individual_tags = [[] for i in range(9)] + 2*[['pickup']] + [[] for i in range(3)] # i'th lick receives i'th element (tags)

licks = licks_from_track(y_comp.tracks[2], get_chords_from_track(y_comp.tracks[1]), split_points,
                         shared_tags, individual_tags)
   
for i, lick in enumerate(licks):
    lick.store(db)



# overlay (potential) licks on progression
misty = 'IM7, v-7, I7, IVM7, iv-9, bVII7, IM7, vi-7, ii-7, V7, iii-7, VI7, ii-7, V7, \
         IM7, v-7, I7, IVM7, iv-9, bVII7, IM7, vi-7, ii-7, V7, I6, bVII9, IM7, \
         v-7, I7b9, IVM7, IVM7,\
         bv-7, VII7, II7, iii-7, VI7b9, ii-7, V7, \
         IM7, v-7, I7, IVM7, iv-9, bVII7, IM7, vi-7, ii-7, V7, IM7, I6'
         
misty_chords = [chords.determine(c, shorthand=True)[0] for c in progressions.to_chords(utilities.parse_progression(misty))] # numerals -> shorthand symbols in key

misty_durs = [1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
              1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 
              1, 1, 1, 1, 
              1, 2, 2, 2, 2, 2, 2, 
              1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1] # adjusted final 251 durations for example

# detect all 251's - THE TARGET
two_fives = sw.detect_numeral_pattern(misty, pattern=['II-7','V7', 'IM7'])
two_five_durs = [[misty_durs[tf[0]], misty_durs[tf[0]+1], misty_durs[tf[0]+2]] for tf in two_fives[1]]


# find valid 251 licks (better to search in the actual chords rather than by tag but PoC for now) - THE SOURCE
candidate_licks = find_partial_matches(db, {'tags':'251'}) # gives db id's (doc_id) # searching should be better, done on actual chord metadata
candidate_licks = [load_entry(db, doc_id) for doc_id in candidate_licks] # instantiate from db

# now combine licks into a new composition track which aligns to the target chords


#%%
y_Obj = JazzLick(source=y_comp, chords=get_chords_from_track(y_comp.tracks[1]), tags=['251', 'major', 'jiminpark'])
#y_Obj.to_midi()
#y_Obj.store(db)
#y_Obj.tag(['4 bars','quaver lines'])

# ---------------------->> NOW ALSO CREATE SOME CODE TO IMPORT THE JIMINPARK 251 INDIVIDUAL MIDIS TO DB
# (aren't these literally just the licks variable?) in which case we can just work on storing separately to db with a loop?

#   NEXT -==========================================
# 1) given slice markers, separate different licks
# overlaying on progressions
# 2) scale degree analysis e.g. generate more licks and find patterns

